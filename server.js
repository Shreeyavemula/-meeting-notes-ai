const express = require('express');
const cors = require('cors');
const multer = require('multer');
const Groq = require('groq-sdk');
const nodemailer = require('nodemailer');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Initialize Groq client
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Configure multer for file uploads
const upload = multer({ dest: 'uploads/' });

// Email transporter setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Generate summary endpoint
app.post('/api/summarize', async (req, res) => {
  try {
    const { transcript, customPrompt } = req.body;
    
    if (!transcript) {
      return res.status(400).json({ error: 'Transcript is required' });
    }

    const prompt = customPrompt || 'Summarize the following meeting transcript in a clear and structured format:';
    
    const completion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: 'You are an expert at summarizing meeting transcripts. Provide clear, structured summaries based on the user\'s instructions.'
        },
        {
          role: 'user',
          content: `${prompt}\n\nTranscript:\n${transcript}`
        }
      ],
      model: 'llama3-8b-8192',
      temperature: 0.3,
      max_tokens: 1000
    });

    const summary = completion.choices[0]?.message?.content;
    
    res.json({ summary });
  } catch (error) {
    console.error('Error generating summary:', error);
    res.status(500).json({ error: 'Failed to generate summary' });
  }
});

// Email sharing endpoint
app.post('/api/share', async (req, res) => {
  try {
    const { summary, recipients, subject } = req.body;
    
    if (!summary || !recipients || recipients.length === 0) {
      return res.status(400).json({ error: 'Summary and recipients are required' });
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipients.join(', '),
      subject: subject || 'Meeting Summary',
      html: `
        <h2>Meeting Summary</h2>
        <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6;">
          ${summary.replace(/\n/g, '<br>')}
        </div>
        <hr>
        <p style="color: #666; font-size: 12px;">Generated by AI Meeting Notes Summarizer</p>
      `
    };

    await transporter.sendMail(mailOptions);
    res.json({ message: 'Summary shared successfully' });
  } catch (error) {
    console.error('Error sharing summary:', error);
    res.status(500).json({ error: 'Failed to share summary' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
