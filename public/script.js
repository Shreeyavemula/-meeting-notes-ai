// DOM elements
const transcriptTextarea = document.getElementById('transcript');
const customPromptTextarea = document.getElementById('customPrompt');
const generateBtn = document.getElementById('generateBtn');
const loading = document.getElementById('loading');
const summarySection = document.getElementById('summarySection');
const summaryTextarea = document.getElementById('summary');
const shareSection = document.getElementById('shareSection');
const emailSubject = document.getElementById('emailSubject');
const recipients = document.getElementById('recipients');
const shareBtn = document.getElementById('shareBtn');
const shareLoading = document.getElementById('shareLoading');
const shareResult = document.getElementById('shareResult');

// Generate summary
generateBtn.addEventListener('click', async () => {
    const transcript = transcriptTextarea.value.trim();
    const customPrompt = customPromptTextarea.value.trim();
    
    if (!transcript) {
        alert('Please enter a transcript first');
        return;
    }
    
    generateBtn.disabled = true;
    loading.classList.remove('hidden');
    
    try {
        // Use different endpoints for local vs production
        const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        const endpoint = isLocal ? '/api/summarize' : '/.netlify/functions/summarize';
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                transcript,
                customPrompt
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            summaryTextarea.value = data.summary;
            summarySection.classList.remove('hidden');
            shareSection.classList.remove('hidden');
        } else {
            alert('Error: ' + data.error);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to generate summary. Please try again.');
    } finally {
        generateBtn.disabled = false;
        loading.classList.add('hidden');
    }
});

// Share summary via email using mailto (browser default email client)
shareBtn.addEventListener('click', async () => {
    const summary = summaryTextarea.value.trim();
    const subject = emailSubject.value.trim();
    const recipientList = recipients.value.trim();
    
    if (!summary) {
        alert('No summary to share');
        return;
    }
    
    if (!recipientList) {
        alert('Please enter recipient email addresses');
        return;
    }
    
    shareBtn.disabled = true;
    shareLoading.classList.remove('hidden');
    shareResult.classList.add('hidden');
    
    try {
        // Create mailto link to open default email client
        const emailSubjectText = encodeURIComponent(subject || 'Meeting Summary');
        const emailBody = encodeURIComponent(`Meeting Summary:\n\n${summary}\n\n---\nGenerated by AI Meeting Notes Summarizer`);
        const emailRecipients = encodeURIComponent(recipientList);
        
        const mailtoLink = `mailto:${emailRecipients}?subject=${emailSubjectText}&body=${emailBody}`;
        
        // Open default email client
        window.open(mailtoLink);
        
        shareResult.textContent = 'Email client opened with summary! Send the email from your default email app.';
        shareResult.className = 'result success';
        shareResult.classList.remove('hidden');
        
    } catch (error) {
        console.error('Error:', error);
        
        // Fallback: Copy to clipboard
        const emailContent = `To: ${recipientList}\nSubject: ${subject || 'Meeting Summary'}\n\n${summary}`;
        
        if (navigator.clipboard) {
            await navigator.clipboard.writeText(emailContent);
            shareResult.textContent = 'Email content copied to clipboard! Paste into your email client.';
        } else {
            shareResult.textContent = 'Copy this summary and email manually: ' + summary;
        }
        
        shareResult.className = 'result success';
        shareResult.classList.remove('hidden');
    } finally {
        shareBtn.disabled = false;
        shareLoading.classList.add('hidden');
    }
});

// Auto-resize textareas
function autoResize(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
}

transcriptTextarea.addEventListener('input', () => autoResize(transcriptTextarea));
summaryTextarea.addEventListener('input', () => autoResize(summaryTextarea));
